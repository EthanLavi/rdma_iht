// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#include "metrics.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace rome {
namespace metrics {
PROTOBUF_CONSTEXPR MetricProto::MetricProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metric_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MetricProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricProtoDefaultTypeInternal() {}
  union {
    MetricProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricProtoDefaultTypeInternal _MetricProto_default_instance_;
PROTOBUF_CONSTEXPR CounterProto::CounterProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.count_)*/ ::uint64_t{0u}
} {}
struct CounterProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CounterProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CounterProtoDefaultTypeInternal() {}
  union {
    CounterProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CounterProtoDefaultTypeInternal _CounterProto_default_instance_;
PROTOBUF_CONSTEXPR StopwatchProto::StopwatchProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.runtime_ns_)*/ ::uint64_t{0u}
} {}
struct StopwatchProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopwatchProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopwatchProtoDefaultTypeInternal() {}
  union {
    StopwatchProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopwatchProtoDefaultTypeInternal _StopwatchProto_default_instance_;
PROTOBUF_CONSTEXPR SummaryProto::SummaryProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.units_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mean_)*/ 0

  , /*decltype(_impl_.stddev_)*/ 0

  , /*decltype(_impl_.min_)*/ 0

  , /*decltype(_impl_.p50_)*/ 0

  , /*decltype(_impl_.p90_)*/ 0

  , /*decltype(_impl_.p95_)*/ 0

  , /*decltype(_impl_.p99_)*/ 0

  , /*decltype(_impl_.p999_)*/ 0

  , /*decltype(_impl_.max_)*/ 0

  , /*decltype(_impl_.count_)*/ ::uint64_t{0u}
} {}
struct SummaryProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryProtoDefaultTypeInternal() {}
  union {
    SummaryProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryProtoDefaultTypeInternal _SummaryProto_default_instance_;
}  // namespace metrics
}  // namespace rome
static ::_pb::Metadata file_level_metadata_metrics_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_metrics_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_metrics_2eproto = nullptr;
const ::uint32_t TableStruct_metrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _impl_.name_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _impl_.metric_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::rome::metrics::CounterProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::CounterProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rome::metrics::CounterProto, _impl_.count_),
    0,
    PROTOBUF_FIELD_OFFSET(::rome::metrics::StopwatchProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::StopwatchProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rome::metrics::StopwatchProto, _impl_.runtime_ns_),
    0,
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.units_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.mean_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.stddev_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.min_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.p50_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.p90_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.p95_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.p99_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.p999_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.max_),
    PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _impl_.count_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::rome::metrics::MetricProto)},
        { 17, 26, -1, sizeof(::rome::metrics::CounterProto)},
        { 27, 36, -1, sizeof(::rome::metrics::StopwatchProto)},
        { 37, 56, -1, sizeof(::rome::metrics::SummaryProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::rome::metrics::_MetricProto_default_instance_._instance,
    &::rome::metrics::_CounterProto_default_instance_._instance,
    &::rome::metrics::_StopwatchProto_default_instance_._instance,
    &::rome::metrics::_SummaryProto_default_instance_._instance,
};
const char descriptor_table_protodef_metrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rmetrics.proto\022\014rome.metrics\"\266\001\n\013Metric"
    "Proto\022\014\n\004name\030\001 \001(\t\022-\n\007counter\030\002 \001(\0132\032.r"
    "ome.metrics.CounterProtoH\000\0221\n\tstopwatch\030"
    "\003 \001(\0132\034.rome.metrics.StopwatchProtoH\000\022-\n"
    "\007summary\030\004 \001(\0132\032.rome.metrics.SummaryPro"
    "toH\000B\010\n\006metric\"\035\n\014CounterProto\022\r\n\005count\030"
    "\001 \001(\004\"$\n\016StopwatchProto\022\022\n\nruntime_ns\030\001 "
    "\001(\004\"\246\001\n\014SummaryProto\022\r\n\005units\030\001 \001(\t\022\014\n\004m"
    "ean\030\002 \001(\001\022\016\n\006stddev\030\003 \001(\001\022\013\n\003min\030\004 \001(\001\022\013"
    "\n\003p50\030\006 \001(\001\022\013\n\003p90\030\007 \001(\001\022\013\n\003p95\030\010 \001(\001\022\013\n"
    "\003p99\030\t \001(\001\022\014\n\004p999\030\n \001(\001\022\013\n\003max\030\013 \001(\001\022\r\n"
    "\005count\030\014 \001(\004"
};
static ::absl::once_flag descriptor_table_metrics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_metrics_2eproto = {
    false,
    false,
    452,
    descriptor_table_protodef_metrics_2eproto,
    "metrics.proto",
    &descriptor_table_metrics_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_metrics_2eproto::offsets,
    file_level_metadata_metrics_2eproto,
    file_level_enum_descriptors_metrics_2eproto,
    file_level_service_descriptors_metrics_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_metrics_2eproto_getter() {
  return &descriptor_table_metrics_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_metrics_2eproto(&descriptor_table_metrics_2eproto);
namespace rome {
namespace metrics {
// ===================================================================

class MetricProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MetricProto, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _impl_._oneof_case_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rome::metrics::CounterProto& counter(const MetricProto* msg);
  static const ::rome::metrics::StopwatchProto& stopwatch(const MetricProto* msg);
  static const ::rome::metrics::SummaryProto& summary(const MetricProto* msg);
};

const ::rome::metrics::CounterProto&
MetricProto::_Internal::counter(const MetricProto* msg) {
  return *msg->_impl_.metric_.counter_;
}
const ::rome::metrics::StopwatchProto&
MetricProto::_Internal::stopwatch(const MetricProto* msg) {
  return *msg->_impl_.metric_.stopwatch_;
}
const ::rome::metrics::SummaryProto&
MetricProto::_Internal::summary(const MetricProto* msg) {
  return *msg->_impl_.metric_.summary_;
}
void MetricProto::set_allocated_counter(::rome::metrics::CounterProto* counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metric();
  if (counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(counter);
    if (message_arena != submessage_arena) {
      counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter, submessage_arena);
    }
    set_has_counter();
    _impl_.metric_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_set_allocated:rome.metrics.MetricProto.counter)
}
void MetricProto::set_allocated_stopwatch(::rome::metrics::StopwatchProto* stopwatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metric();
  if (stopwatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stopwatch);
    if (message_arena != submessage_arena) {
      stopwatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopwatch, submessage_arena);
    }
    set_has_stopwatch();
    _impl_.metric_.stopwatch_ = stopwatch;
  }
  // @@protoc_insertion_point(field_set_allocated:rome.metrics.MetricProto.stopwatch)
}
void MetricProto::set_allocated_summary(::rome::metrics::SummaryProto* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metric();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    _impl_.metric_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:rome.metrics.MetricProto.summary)
}
MetricProto::MetricProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.metrics.MetricProto)
}
MetricProto::MetricProto(const MetricProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.metric_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  clear_has_metric();
  switch (from.metric_case()) {
    case kCounter: {
      _this->_internal_mutable_counter()->::rome::metrics::CounterProto::MergeFrom(
          from._internal_counter());
      break;
    }
    case kStopwatch: {
      _this->_internal_mutable_stopwatch()->::rome::metrics::StopwatchProto::MergeFrom(
          from._internal_stopwatch());
      break;
    }
    case kSummary: {
      _this->_internal_mutable_summary()->::rome::metrics::SummaryProto::MergeFrom(
          from._internal_summary());
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rome.metrics.MetricProto)
}

inline void MetricProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.metric_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_metric();
}

MetricProto::~MetricProto() {
  // @@protoc_insertion_point(destructor:rome.metrics.MetricProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_metric()) {
    clear_metric();
  }
}

void MetricProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricProto::clear_metric() {
// @@protoc_insertion_point(one_of_clear_start:rome.metrics.MetricProto)
  switch (metric_case()) {
    case kCounter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metric_.counter_;
      }
      break;
    }
    case kStopwatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metric_.stopwatch_;
      }
      break;
    }
    case kSummary: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metric_.summary_;
      }
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = METRIC_NOT_SET;
}


void MetricProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.metrics.MetricProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  clear_metric();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "rome.metrics.MetricProto.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // .rome.metrics.CounterProto counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .rome.metrics.StopwatchProto stopwatch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopwatch(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .rome.metrics.SummaryProto summary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MetricProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.metrics.MetricProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "rome.metrics.MetricProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (metric_case()) {
    case kCounter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::counter(this),
          _Internal::counter(this).GetCachedSize(), target, stream);
      break;
    }
    case kStopwatch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::stopwatch(this),
          _Internal::stopwatch(this).GetCachedSize(), target, stream);
      break;
    }
    case kSummary: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::summary(this),
          _Internal::summary(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.metrics.MetricProto)
  return target;
}

::size_t MetricProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.metrics.MetricProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  switch (metric_case()) {
    // .rome.metrics.CounterProto counter = 2;
    case kCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metric_.counter_);
      break;
    }
    // .rome.metrics.StopwatchProto stopwatch = 3;
    case kStopwatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metric_.stopwatch_);
      break;
    }
    // .rome.metrics.SummaryProto summary = 4;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metric_.summary_);
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricProto::GetClassData() const { return &_class_data_; }


void MetricProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricProto*>(&to_msg);
  auto& from = static_cast<const MetricProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rome.metrics.MetricProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.metric_case()) {
    case kCounter: {
      _this->_internal_mutable_counter()->::rome::metrics::CounterProto::MergeFrom(
          from._internal_counter());
      break;
    }
    case kStopwatch: {
      _this->_internal_mutable_stopwatch()->::rome::metrics::StopwatchProto::MergeFrom(
          from._internal_stopwatch());
      break;
    }
    case kSummary: {
      _this->_internal_mutable_summary()->::rome::metrics::SummaryProto::MergeFrom(
          from._internal_summary());
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricProto::CopyFrom(const MetricProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.metrics.MetricProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricProto::IsInitialized() const {
  return true;
}

void MetricProto::InternalSwap(MetricProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.metric_, other->_impl_.metric_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[0]);
}
// ===================================================================

class CounterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CounterProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CounterProto, _impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CounterProto::CounterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.metrics.CounterProto)
}
CounterProto::CounterProto(const CounterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rome.metrics.CounterProto)
}

inline void CounterProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_) { ::uint64_t{0u} }

  };
}

CounterProto::~CounterProto() {
  // @@protoc_insertion_point(destructor:rome.metrics.CounterProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CounterProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CounterProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CounterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.metrics.CounterProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CounterProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CounterProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.metrics.CounterProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.metrics.CounterProto)
  return target;
}

::size_t CounterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.metrics.CounterProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 count = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CounterProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CounterProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CounterProto::GetClassData() const { return &_class_data_; }


void CounterProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CounterProto*>(&to_msg);
  auto& from = static_cast<const CounterProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rome.metrics.CounterProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CounterProto::CopyFrom(const CounterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.metrics.CounterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterProto::IsInitialized() const {
  return true;
}

void CounterProto::InternalSwap(CounterProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CounterProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[1]);
}
// ===================================================================

class StopwatchProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StopwatchProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StopwatchProto, _impl_._has_bits_);
  static void set_has_runtime_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopwatchProto::StopwatchProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.metrics.StopwatchProto)
}
StopwatchProto::StopwatchProto(const StopwatchProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rome.metrics.StopwatchProto)
}

inline void StopwatchProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.runtime_ns_) { ::uint64_t{0u} }

  };
}

StopwatchProto::~StopwatchProto() {
  // @@protoc_insertion_point(destructor:rome.metrics.StopwatchProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopwatchProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopwatchProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopwatchProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.metrics.StopwatchProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.runtime_ns_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopwatchProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 runtime_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_runtime_ns(&has_bits);
          _impl_.runtime_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StopwatchProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.metrics.StopwatchProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 runtime_ns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_runtime_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.metrics.StopwatchProto)
  return target;
}

::size_t StopwatchProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.metrics.StopwatchProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 runtime_ns = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_runtime_ns());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopwatchProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopwatchProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopwatchProto::GetClassData() const { return &_class_data_; }


void StopwatchProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopwatchProto*>(&to_msg);
  auto& from = static_cast<const StopwatchProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rome.metrics.StopwatchProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_runtime_ns(from._internal_runtime_ns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopwatchProto::CopyFrom(const StopwatchProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.metrics.StopwatchProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopwatchProto::IsInitialized() const {
  return true;
}

void StopwatchProto::InternalSwap(StopwatchProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.runtime_ns_, other->_impl_.runtime_ns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopwatchProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[2]);
}
// ===================================================================

class SummaryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SummaryProto, _impl_._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p50(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_p90(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_p95(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_p99(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_p999(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

SummaryProto::SummaryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.metrics.SummaryProto)
}
SummaryProto::SummaryProto(const SummaryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.units_) {}

    , decltype(_impl_.mean_) {}

    , decltype(_impl_.stddev_) {}

    , decltype(_impl_.min_) {}

    , decltype(_impl_.p50_) {}

    , decltype(_impl_.p90_) {}

    , decltype(_impl_.p95_) {}

    , decltype(_impl_.p99_) {}

    , decltype(_impl_.p999_) {}

    , decltype(_impl_.max_) {}

    , decltype(_impl_.count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.units_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.units_.Set(from._internal_units(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mean_, &from._impl_.mean_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.mean_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:rome.metrics.SummaryProto)
}

inline void SummaryProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.units_) {}

    , decltype(_impl_.mean_) { 0 }

    , decltype(_impl_.stddev_) { 0 }

    , decltype(_impl_.min_) { 0 }

    , decltype(_impl_.p50_) { 0 }

    , decltype(_impl_.p90_) { 0 }

    , decltype(_impl_.p95_) { 0 }

    , decltype(_impl_.p99_) { 0 }

    , decltype(_impl_.p999_) { 0 }

    , decltype(_impl_.max_) { 0 }

    , decltype(_impl_.count_) { ::uint64_t{0u} }

  };
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.units_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SummaryProto::~SummaryProto() {
  // @@protoc_insertion_point(destructor:rome.metrics.SummaryProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.units_.Destroy();
}

void SummaryProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.metrics.SummaryProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.units_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.mean_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.p99_) -
        reinterpret_cast<char*>(&_impl_.mean_)) + sizeof(_impl_.p99_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.p999_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.p999_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_units();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "rome.metrics.SummaryProto.units");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_mean(&has_bits);
          _impl_.mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double stddev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_stddev(&has_bits);
          _impl_.stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_min(&has_bits);
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double p50 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _Internal::set_has_p50(&has_bits);
          _impl_.p50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double p90 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _Internal::set_has_p90(&has_bits);
          _impl_.p90_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double p95 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _Internal::set_has_p95(&has_bits);
          _impl_.p95_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double p99 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 73)) {
          _Internal::set_has_p99(&has_bits);
          _impl_.p99_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double p999 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 81)) {
          _Internal::set_has_p999(&has_bits);
          _impl_.p999_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 89)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SummaryProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.metrics.SummaryProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string units = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_units();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "rome.metrics.SummaryProto.units");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional double mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_mean(), target);
  }

  // optional double stddev = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_stddev(), target);
  }

  // optional double min = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_min(), target);
  }

  // optional double p50 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_p50(), target);
  }

  // optional double p90 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_p90(), target);
  }

  // optional double p95 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_p95(), target);
  }

  // optional double p99 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_p99(), target);
  }

  // optional double p999 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_p999(), target);
  }

  // optional double max = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_max(), target);
  }

  // optional uint64 count = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        12, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.metrics.SummaryProto)
  return target;
}

::size_t SummaryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.metrics.SummaryProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string units = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_units());
    }

    // optional double mean = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double stddev = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double min = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional double p50 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional double p90 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional double p95 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional double p99 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double p999 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }

    // optional double max = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }

    // optional uint64 count = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryProto::GetClassData() const { return &_class_data_; }


void SummaryProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryProto*>(&to_msg);
  auto& from = static_cast<const SummaryProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rome.metrics.SummaryProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_units(from._internal_units());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mean_ = from._impl_.mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stddev_ = from._impl_.stddev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.p50_ = from._impl_.p50_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.p90_ = from._impl_.p90_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.p95_ = from._impl_.p95_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.p99_ = from._impl_.p99_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.p999_ = from._impl_.p999_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryProto::CopyFrom(const SummaryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.metrics.SummaryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryProto::IsInitialized() const {
  return true;
}

void SummaryProto::InternalSwap(SummaryProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.units_, lhs_arena,
                                       &other->_impl_.units_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryProto, _impl_.count_)
      + sizeof(SummaryProto::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(SummaryProto, _impl_.mean_)>(
          reinterpret_cast<char*>(&_impl_.mean_),
          reinterpret_cast<char*>(&other->_impl_.mean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
}  // namespace rome
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rome::metrics::MetricProto*
Arena::CreateMaybeMessage< ::rome::metrics::MetricProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::metrics::MetricProto >(arena);
}
template<> PROTOBUF_NOINLINE ::rome::metrics::CounterProto*
Arena::CreateMaybeMessage< ::rome::metrics::CounterProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::metrics::CounterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::rome::metrics::StopwatchProto*
Arena::CreateMaybeMessage< ::rome::metrics::StopwatchProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::metrics::StopwatchProto >(arena);
}
template<> PROTOBUF_NOINLINE ::rome::metrics::SummaryProto*
Arena::CreateMaybeMessage< ::rome::metrics::SummaryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::metrics::SummaryProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
