// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment.proto

#include "experiment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR AckProto::AckProto(
    ::_pbi::ConstantInitialized) {}
struct AckProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckProtoDefaultTypeInternal() {}
  union {
    AckProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckProtoDefaultTypeInternal _AckProto_default_instance_;
PROTOBUF_CONSTEXPR ExperimentParams::ExperimentParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.think_time_)*/0
  , /*decltype(_impl_.unlimited_stream_)*/false
  , /*decltype(_impl_.key_lb_)*/0
  , /*decltype(_impl_.region_size_)*/22
  , /*decltype(_impl_.qps_sample_rate_)*/10
  , /*decltype(_impl_.max_qps_second_)*/-1
  , /*decltype(_impl_.runtime_)*/10
  , /*decltype(_impl_.op_count_)*/10000
  , /*decltype(_impl_.contains_)*/80
  , /*decltype(_impl_.insert_)*/10
  , /*decltype(_impl_.remove_)*/10
  , /*decltype(_impl_.key_ub_)*/1000000} {}
struct ExperimentParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExperimentParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExperimentParamsDefaultTypeInternal() {}
  union {
    ExperimentParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExperimentParamsDefaultTypeInternal _ExperimentParams_default_instance_;
static ::_pb::Metadata file_level_metadata_experiment_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_experiment_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_experiment_2eproto = nullptr;

const uint32_t TableStruct_experiment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AckProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.think_time_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.qps_sample_rate_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.max_qps_second_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.runtime_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.unlimited_stream_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.op_count_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.contains_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.insert_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.remove_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.key_lb_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.key_ub_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _impl_.region_size_),
  0,
  4,
  5,
  6,
  1,
  7,
  8,
  9,
  10,
  2,
  11,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AckProto)},
  { 6, 24, -1, sizeof(::ExperimentParams)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_AckProto_default_instance_._instance,
  &::_ExperimentParams_default_instance_._instance,
};

const char descriptor_table_protodef_experiment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020experiment.proto\"\n\n\010AckProto\"\264\002\n\020Exper"
  "imentParams\022\025\n\nthink_time\030\001 \002(\005:\0010\022\033\n\017qp"
  "s_sample_rate\030\002 \002(\005:\00210\022\032\n\016max_qps_secon"
  "d\030\003 \002(\005:\002-1\022\023\n\007runtime\030\004 \002(\005:\00210\022\037\n\020unli"
  "mited_stream\030\005 \002(\010:\005false\022\027\n\010op_count\030\006 "
  "\002(\005:\00510000\022\024\n\010contains\030\007 \002(\005:\00280\022\022\n\006inse"
  "rt\030\010 \002(\005:\00210\022\022\n\006remove\030\t \002(\005:\00210\022\021\n\006key_"
  "lb\030\n \002(\005:\0010\022\027\n\006key_ub\030\013 \002(\005:\0071000000\022\027\n\013"
  "region_size\030\014 \002(\005:\00222"
  ;
static ::_pbi::once_flag descriptor_table_experiment_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_experiment_2eproto = {
    false, false, 341, descriptor_table_protodef_experiment_2eproto,
    "experiment.proto",
    &descriptor_table_experiment_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_experiment_2eproto::offsets,
    file_level_metadata_experiment_2eproto, file_level_enum_descriptors_experiment_2eproto,
    file_level_service_descriptors_experiment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_experiment_2eproto_getter() {
  return &descriptor_table_experiment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_experiment_2eproto(&descriptor_table_experiment_2eproto);

// ===================================================================

class AckProto::_Internal {
 public:
};

AckProto::AckProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:AckProto)
}
AckProto::AckProto(const AckProto& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AckProto* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AckProto)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AckProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AckProto::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AckProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_experiment_2eproto_getter, &descriptor_table_experiment_2eproto_once,
      file_level_metadata_experiment_2eproto[0]);
}

// ===================================================================

class ExperimentParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ExperimentParams>()._impl_._has_bits_);
  static void set_has_think_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qps_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_qps_second(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_runtime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unlimited_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_op_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_contains(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_insert(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_key_lb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_ub(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_region_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fff) ^ 0x00000fff) != 0;
  }
};

ExperimentParams::ExperimentParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExperimentParams)
}
ExperimentParams::ExperimentParams(const ExperimentParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExperimentParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.think_time_){}
    , decltype(_impl_.unlimited_stream_){}
    , decltype(_impl_.key_lb_){}
    , decltype(_impl_.region_size_){}
    , decltype(_impl_.qps_sample_rate_){}
    , decltype(_impl_.max_qps_second_){}
    , decltype(_impl_.runtime_){}
    , decltype(_impl_.op_count_){}
    , decltype(_impl_.contains_){}
    , decltype(_impl_.insert_){}
    , decltype(_impl_.remove_){}
    , decltype(_impl_.key_ub_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.think_time_, &from._impl_.think_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.key_ub_) -
    reinterpret_cast<char*>(&_impl_.think_time_)) + sizeof(_impl_.key_ub_));
  // @@protoc_insertion_point(copy_constructor:ExperimentParams)
}

inline void ExperimentParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.think_time_){0}
    , decltype(_impl_.unlimited_stream_){false}
    , decltype(_impl_.key_lb_){0}
    , decltype(_impl_.region_size_){22}
    , decltype(_impl_.qps_sample_rate_){10}
    , decltype(_impl_.max_qps_second_){-1}
    , decltype(_impl_.runtime_){10}
    , decltype(_impl_.op_count_){10000}
    , decltype(_impl_.contains_){80}
    , decltype(_impl_.insert_){10}
    , decltype(_impl_.remove_){10}
    , decltype(_impl_.key_ub_){1000000}
  };
}

ExperimentParams::~ExperimentParams() {
  // @@protoc_insertion_point(destructor:ExperimentParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExperimentParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExperimentParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExperimentParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ExperimentParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.think_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.key_lb_) -
        reinterpret_cast<char*>(&_impl_.think_time_)) + sizeof(_impl_.key_lb_));
    _impl_.region_size_ = 22;
    _impl_.qps_sample_rate_ = 10;
    _impl_.max_qps_second_ = -1;
    _impl_.runtime_ = 10;
    _impl_.op_count_ = 10000;
  }
  if (cached_has_bits & 0x00000f00u) {
    _impl_.contains_ = 80;
    _impl_.insert_ = 10;
    _impl_.remove_ = 10;
    _impl_.key_ub_ = 1000000;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExperimentParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 think_time = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_think_time(&has_bits);
          _impl_.think_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 qps_sample_rate = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_qps_sample_rate(&has_bits);
          _impl_.qps_sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 max_qps_second = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_qps_second(&has_bits);
          _impl_.max_qps_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 runtime = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_runtime(&has_bits);
          _impl_.runtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool unlimited_stream = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_unlimited_stream(&has_bits);
          _impl_.unlimited_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 op_count = 6 [default = 10000];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_op_count(&has_bits);
          _impl_.op_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 contains = 7 [default = 80];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_contains(&has_bits);
          _impl_.contains_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 insert = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_insert(&has_bits);
          _impl_.insert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 remove = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_remove(&has_bits);
          _impl_.remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 key_lb = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_key_lb(&has_bits);
          _impl_.key_lb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 key_ub = 11 [default = 1000000];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_key_ub(&has_bits);
          _impl_.key_ub_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 region_size = 12 [default = 22];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_region_size(&has_bits);
          _impl_.region_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExperimentParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExperimentParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 think_time = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_think_time(), target);
  }

  // required int32 qps_sample_rate = 2 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_qps_sample_rate(), target);
  }

  // required int32 max_qps_second = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_qps_second(), target);
  }

  // required int32 runtime = 4 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_runtime(), target);
  }

  // required bool unlimited_stream = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_unlimited_stream(), target);
  }

  // required int32 op_count = 6 [default = 10000];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_op_count(), target);
  }

  // required int32 contains = 7 [default = 80];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_contains(), target);
  }

  // required int32 insert = 8 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_insert(), target);
  }

  // required int32 remove = 9 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_remove(), target);
  }

  // required int32 key_lb = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_key_lb(), target);
  }

  // required int32 key_ub = 11 [default = 1000000];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_key_ub(), target);
  }

  // required int32 region_size = 12 [default = 22];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_region_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExperimentParams)
  return target;
}

size_t ExperimentParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ExperimentParams)
  size_t total_size = 0;

  if (_internal_has_think_time()) {
    // required int32 think_time = 1 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_think_time());
  }

  if (_internal_has_unlimited_stream()) {
    // required bool unlimited_stream = 5 [default = false];
    total_size += 1 + 1;
  }

  if (_internal_has_key_lb()) {
    // required int32 key_lb = 10 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key_lb());
  }

  if (_internal_has_region_size()) {
    // required int32 region_size = 12 [default = 22];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_region_size());
  }

  if (_internal_has_qps_sample_rate()) {
    // required int32 qps_sample_rate = 2 [default = 10];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qps_sample_rate());
  }

  if (_internal_has_max_qps_second()) {
    // required int32 max_qps_second = 3 [default = -1];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_qps_second());
  }

  if (_internal_has_runtime()) {
    // required int32 runtime = 4 [default = 10];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_runtime());
  }

  if (_internal_has_op_count()) {
    // required int32 op_count = 6 [default = 10000];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_op_count());
  }

  if (_internal_has_contains()) {
    // required int32 contains = 7 [default = 80];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_contains());
  }

  if (_internal_has_insert()) {
    // required int32 insert = 8 [default = 10];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_insert());
  }

  if (_internal_has_remove()) {
    // required int32 remove = 9 [default = 10];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_remove());
  }

  if (_internal_has_key_ub()) {
    // required int32 key_ub = 11 [default = 1000000];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key_ub());
  }

  return total_size;
}
size_t ExperimentParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExperimentParams)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required int32 think_time = 1 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_think_time());

    // required bool unlimited_stream = 5 [default = false];
    total_size += 1 + 1;

    // required int32 key_lb = 10 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key_lb());

    // required int32 region_size = 12 [default = 22];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_region_size());

    // required int32 qps_sample_rate = 2 [default = 10];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qps_sample_rate());

    // required int32 max_qps_second = 3 [default = -1];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_qps_second());

    // required int32 runtime = 4 [default = 10];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_runtime());

    // required int32 op_count = 6 [default = 10000];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_op_count());

    // required int32 contains = 7 [default = 80];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_contains());

    // required int32 insert = 8 [default = 10];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_insert());

    // required int32 remove = 9 [default = 10];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_remove());

    // required int32 key_ub = 11 [default = 1000000];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key_ub());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExperimentParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExperimentParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExperimentParams::GetClassData() const { return &_class_data_; }


void ExperimentParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExperimentParams*>(&to_msg);
  auto& from = static_cast<const ExperimentParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExperimentParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.think_time_ = from._impl_.think_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unlimited_stream_ = from._impl_.unlimited_stream_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.key_lb_ = from._impl_.key_lb_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.region_size_ = from._impl_.region_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.qps_sample_rate_ = from._impl_.qps_sample_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.max_qps_second_ = from._impl_.max_qps_second_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.runtime_ = from._impl_.runtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.op_count_ = from._impl_.op_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.contains_ = from._impl_.contains_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.insert_ = from._impl_.insert_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.remove_ = from._impl_.remove_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.key_ub_ = from._impl_.key_ub_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExperimentParams::CopyFrom(const ExperimentParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExperimentParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ExperimentParams::InternalSwap(ExperimentParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExperimentParams, _impl_.key_lb_)
      + sizeof(ExperimentParams::_impl_.key_lb_)
      - PROTOBUF_FIELD_OFFSET(ExperimentParams, _impl_.think_time_)>(
          reinterpret_cast<char*>(&_impl_.think_time_),
          reinterpret_cast<char*>(&other->_impl_.think_time_));
  swap(_impl_.region_size_, other->_impl_.region_size_);
  swap(_impl_.qps_sample_rate_, other->_impl_.qps_sample_rate_);
  swap(_impl_.max_qps_second_, other->_impl_.max_qps_second_);
  swap(_impl_.runtime_, other->_impl_.runtime_);
  swap(_impl_.op_count_, other->_impl_.op_count_);
  swap(_impl_.contains_, other->_impl_.contains_);
  swap(_impl_.insert_, other->_impl_.insert_);
  swap(_impl_.remove_, other->_impl_.remove_);
  swap(_impl_.key_ub_, other->_impl_.key_ub_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExperimentParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_experiment_2eproto_getter, &descriptor_table_experiment_2eproto_once,
      file_level_metadata_experiment_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AckProto*
Arena::CreateMaybeMessage< ::AckProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AckProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ExperimentParams*
Arena::CreateMaybeMessage< ::ExperimentParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExperimentParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
