// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_experiment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_experiment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_experiment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_experiment_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_experiment_2eproto;
class AckProto;
struct AckProtoDefaultTypeInternal;
extern AckProtoDefaultTypeInternal _AckProto_default_instance_;
class ExperimentParams;
struct ExperimentParamsDefaultTypeInternal;
extern ExperimentParamsDefaultTypeInternal _ExperimentParams_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AckProto* Arena::CreateMaybeMessage<::AckProto>(Arena*);
template<> ::ExperimentParams* Arena::CreateMaybeMessage<::ExperimentParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AckProto final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:AckProto) */ {
 public:
  inline AckProto() : AckProto(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AckProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckProto(const AckProto& from);
  AckProto(AckProto&& from) noexcept
    : AckProto() {
    *this = ::std::move(from);
  }

  inline AckProto& operator=(const AckProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckProto& operator=(AckProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckProto* internal_default_instance() {
    return reinterpret_cast<const AckProto*>(
               &_AckProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AckProto& a, AckProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AckProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AckProto& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AckProto& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AckProto";
  }
  protected:
  explicit AckProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AckProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_experiment_2eproto;
};
// -------------------------------------------------------------------

class ExperimentParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExperimentParams) */ {
 public:
  inline ExperimentParams() : ExperimentParams(nullptr) {}
  ~ExperimentParams() override;
  explicit PROTOBUF_CONSTEXPR ExperimentParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExperimentParams(const ExperimentParams& from);
  ExperimentParams(ExperimentParams&& from) noexcept
    : ExperimentParams() {
    *this = ::std::move(from);
  }

  inline ExperimentParams& operator=(const ExperimentParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExperimentParams& operator=(ExperimentParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExperimentParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExperimentParams* internal_default_instance() {
    return reinterpret_cast<const ExperimentParams*>(
               &_ExperimentParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExperimentParams& a, ExperimentParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ExperimentParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExperimentParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExperimentParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExperimentParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExperimentParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExperimentParams& from) {
    ExperimentParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExperimentParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExperimentParams";
  }
  protected:
  explicit ExperimentParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThinkTimeFieldNumber = 1,
    kUnlimitedStreamFieldNumber = 5,
    kKeyLbFieldNumber = 10,
    kRegionSizeFieldNumber = 12,
    kQpsSampleRateFieldNumber = 2,
    kMaxQpsSecondFieldNumber = 3,
    kRuntimeFieldNumber = 4,
    kOpCountFieldNumber = 6,
    kContainsFieldNumber = 7,
    kInsertFieldNumber = 8,
    kRemoveFieldNumber = 9,
    kKeyUbFieldNumber = 11,
  };
  // required int32 think_time = 1 [default = 0];
  bool has_think_time() const;
  private:
  bool _internal_has_think_time() const;
  public:
  void clear_think_time();
  int32_t think_time() const;
  void set_think_time(int32_t value);
  private:
  int32_t _internal_think_time() const;
  void _internal_set_think_time(int32_t value);
  public:

  // required bool unlimited_stream = 5 [default = false];
  bool has_unlimited_stream() const;
  private:
  bool _internal_has_unlimited_stream() const;
  public:
  void clear_unlimited_stream();
  bool unlimited_stream() const;
  void set_unlimited_stream(bool value);
  private:
  bool _internal_unlimited_stream() const;
  void _internal_set_unlimited_stream(bool value);
  public:

  // required int32 key_lb = 10 [default = 0];
  bool has_key_lb() const;
  private:
  bool _internal_has_key_lb() const;
  public:
  void clear_key_lb();
  int32_t key_lb() const;
  void set_key_lb(int32_t value);
  private:
  int32_t _internal_key_lb() const;
  void _internal_set_key_lb(int32_t value);
  public:

  // required int32 region_size = 12 [default = 22];
  bool has_region_size() const;
  private:
  bool _internal_has_region_size() const;
  public:
  void clear_region_size();
  int32_t region_size() const;
  void set_region_size(int32_t value);
  private:
  int32_t _internal_region_size() const;
  void _internal_set_region_size(int32_t value);
  public:

  // required int32 qps_sample_rate = 2 [default = 10];
  bool has_qps_sample_rate() const;
  private:
  bool _internal_has_qps_sample_rate() const;
  public:
  void clear_qps_sample_rate();
  int32_t qps_sample_rate() const;
  void set_qps_sample_rate(int32_t value);
  private:
  int32_t _internal_qps_sample_rate() const;
  void _internal_set_qps_sample_rate(int32_t value);
  public:

  // required int32 max_qps_second = 3 [default = -1];
  bool has_max_qps_second() const;
  private:
  bool _internal_has_max_qps_second() const;
  public:
  void clear_max_qps_second();
  int32_t max_qps_second() const;
  void set_max_qps_second(int32_t value);
  private:
  int32_t _internal_max_qps_second() const;
  void _internal_set_max_qps_second(int32_t value);
  public:

  // required int32 runtime = 4 [default = 10];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  int32_t runtime() const;
  void set_runtime(int32_t value);
  private:
  int32_t _internal_runtime() const;
  void _internal_set_runtime(int32_t value);
  public:

  // required int32 op_count = 6 [default = 10000];
  bool has_op_count() const;
  private:
  bool _internal_has_op_count() const;
  public:
  void clear_op_count();
  int32_t op_count() const;
  void set_op_count(int32_t value);
  private:
  int32_t _internal_op_count() const;
  void _internal_set_op_count(int32_t value);
  public:

  // required int32 contains = 7 [default = 80];
  bool has_contains() const;
  private:
  bool _internal_has_contains() const;
  public:
  void clear_contains();
  int32_t contains() const;
  void set_contains(int32_t value);
  private:
  int32_t _internal_contains() const;
  void _internal_set_contains(int32_t value);
  public:

  // required int32 insert = 8 [default = 10];
  bool has_insert() const;
  private:
  bool _internal_has_insert() const;
  public:
  void clear_insert();
  int32_t insert() const;
  void set_insert(int32_t value);
  private:
  int32_t _internal_insert() const;
  void _internal_set_insert(int32_t value);
  public:

  // required int32 remove = 9 [default = 10];
  bool has_remove() const;
  private:
  bool _internal_has_remove() const;
  public:
  void clear_remove();
  int32_t remove() const;
  void set_remove(int32_t value);
  private:
  int32_t _internal_remove() const;
  void _internal_set_remove(int32_t value);
  public:

  // required int32 key_ub = 11 [default = 1000000];
  bool has_key_ub() const;
  private:
  bool _internal_has_key_ub() const;
  public:
  void clear_key_ub();
  int32_t key_ub() const;
  void set_key_ub(int32_t value);
  private:
  int32_t _internal_key_ub() const;
  void _internal_set_key_ub(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ExperimentParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t think_time_;
    bool unlimited_stream_;
    int32_t key_lb_;
    int32_t region_size_;
    int32_t qps_sample_rate_;
    int32_t max_qps_second_;
    int32_t runtime_;
    int32_t op_count_;
    int32_t contains_;
    int32_t insert_;
    int32_t remove_;
    int32_t key_ub_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_experiment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AckProto

// -------------------------------------------------------------------

// ExperimentParams

// required int32 think_time = 1 [default = 0];
inline bool ExperimentParams::_internal_has_think_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExperimentParams::has_think_time() const {
  return _internal_has_think_time();
}
inline void ExperimentParams::clear_think_time() {
  _impl_.think_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ExperimentParams::_internal_think_time() const {
  return _impl_.think_time_;
}
inline int32_t ExperimentParams::think_time() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.think_time)
  return _internal_think_time();
}
inline void ExperimentParams::_internal_set_think_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.think_time_ = value;
}
inline void ExperimentParams::set_think_time(int32_t value) {
  _internal_set_think_time(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.think_time)
}

// required int32 qps_sample_rate = 2 [default = 10];
inline bool ExperimentParams::_internal_has_qps_sample_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExperimentParams::has_qps_sample_rate() const {
  return _internal_has_qps_sample_rate();
}
inline void ExperimentParams::clear_qps_sample_rate() {
  _impl_.qps_sample_rate_ = 10;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ExperimentParams::_internal_qps_sample_rate() const {
  return _impl_.qps_sample_rate_;
}
inline int32_t ExperimentParams::qps_sample_rate() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.qps_sample_rate)
  return _internal_qps_sample_rate();
}
inline void ExperimentParams::_internal_set_qps_sample_rate(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.qps_sample_rate_ = value;
}
inline void ExperimentParams::set_qps_sample_rate(int32_t value) {
  _internal_set_qps_sample_rate(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.qps_sample_rate)
}

// required int32 max_qps_second = 3 [default = -1];
inline bool ExperimentParams::_internal_has_max_qps_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExperimentParams::has_max_qps_second() const {
  return _internal_has_max_qps_second();
}
inline void ExperimentParams::clear_max_qps_second() {
  _impl_.max_qps_second_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ExperimentParams::_internal_max_qps_second() const {
  return _impl_.max_qps_second_;
}
inline int32_t ExperimentParams::max_qps_second() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.max_qps_second)
  return _internal_max_qps_second();
}
inline void ExperimentParams::_internal_set_max_qps_second(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_qps_second_ = value;
}
inline void ExperimentParams::set_max_qps_second(int32_t value) {
  _internal_set_max_qps_second(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.max_qps_second)
}

// required int32 runtime = 4 [default = 10];
inline bool ExperimentParams::_internal_has_runtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExperimentParams::has_runtime() const {
  return _internal_has_runtime();
}
inline void ExperimentParams::clear_runtime() {
  _impl_.runtime_ = 10;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ExperimentParams::_internal_runtime() const {
  return _impl_.runtime_;
}
inline int32_t ExperimentParams::runtime() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.runtime)
  return _internal_runtime();
}
inline void ExperimentParams::_internal_set_runtime(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.runtime_ = value;
}
inline void ExperimentParams::set_runtime(int32_t value) {
  _internal_set_runtime(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.runtime)
}

// required bool unlimited_stream = 5 [default = false];
inline bool ExperimentParams::_internal_has_unlimited_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExperimentParams::has_unlimited_stream() const {
  return _internal_has_unlimited_stream();
}
inline void ExperimentParams::clear_unlimited_stream() {
  _impl_.unlimited_stream_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ExperimentParams::_internal_unlimited_stream() const {
  return _impl_.unlimited_stream_;
}
inline bool ExperimentParams::unlimited_stream() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.unlimited_stream)
  return _internal_unlimited_stream();
}
inline void ExperimentParams::_internal_set_unlimited_stream(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unlimited_stream_ = value;
}
inline void ExperimentParams::set_unlimited_stream(bool value) {
  _internal_set_unlimited_stream(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.unlimited_stream)
}

// required int32 op_count = 6 [default = 10000];
inline bool ExperimentParams::_internal_has_op_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExperimentParams::has_op_count() const {
  return _internal_has_op_count();
}
inline void ExperimentParams::clear_op_count() {
  _impl_.op_count_ = 10000;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t ExperimentParams::_internal_op_count() const {
  return _impl_.op_count_;
}
inline int32_t ExperimentParams::op_count() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.op_count)
  return _internal_op_count();
}
inline void ExperimentParams::_internal_set_op_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.op_count_ = value;
}
inline void ExperimentParams::set_op_count(int32_t value) {
  _internal_set_op_count(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.op_count)
}

// required int32 contains = 7 [default = 80];
inline bool ExperimentParams::_internal_has_contains() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ExperimentParams::has_contains() const {
  return _internal_has_contains();
}
inline void ExperimentParams::clear_contains() {
  _impl_.contains_ = 80;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t ExperimentParams::_internal_contains() const {
  return _impl_.contains_;
}
inline int32_t ExperimentParams::contains() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.contains)
  return _internal_contains();
}
inline void ExperimentParams::_internal_set_contains(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.contains_ = value;
}
inline void ExperimentParams::set_contains(int32_t value) {
  _internal_set_contains(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.contains)
}

// required int32 insert = 8 [default = 10];
inline bool ExperimentParams::_internal_has_insert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ExperimentParams::has_insert() const {
  return _internal_has_insert();
}
inline void ExperimentParams::clear_insert() {
  _impl_.insert_ = 10;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t ExperimentParams::_internal_insert() const {
  return _impl_.insert_;
}
inline int32_t ExperimentParams::insert() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.insert)
  return _internal_insert();
}
inline void ExperimentParams::_internal_set_insert(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.insert_ = value;
}
inline void ExperimentParams::set_insert(int32_t value) {
  _internal_set_insert(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.insert)
}

// required int32 remove = 9 [default = 10];
inline bool ExperimentParams::_internal_has_remove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ExperimentParams::has_remove() const {
  return _internal_has_remove();
}
inline void ExperimentParams::clear_remove() {
  _impl_.remove_ = 10;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t ExperimentParams::_internal_remove() const {
  return _impl_.remove_;
}
inline int32_t ExperimentParams::remove() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.remove)
  return _internal_remove();
}
inline void ExperimentParams::_internal_set_remove(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.remove_ = value;
}
inline void ExperimentParams::set_remove(int32_t value) {
  _internal_set_remove(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.remove)
}

// required int32 key_lb = 10 [default = 0];
inline bool ExperimentParams::_internal_has_key_lb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExperimentParams::has_key_lb() const {
  return _internal_has_key_lb();
}
inline void ExperimentParams::clear_key_lb() {
  _impl_.key_lb_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ExperimentParams::_internal_key_lb() const {
  return _impl_.key_lb_;
}
inline int32_t ExperimentParams::key_lb() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.key_lb)
  return _internal_key_lb();
}
inline void ExperimentParams::_internal_set_key_lb(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.key_lb_ = value;
}
inline void ExperimentParams::set_key_lb(int32_t value) {
  _internal_set_key_lb(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.key_lb)
}

// required int32 key_ub = 11 [default = 1000000];
inline bool ExperimentParams::_internal_has_key_ub() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ExperimentParams::has_key_ub() const {
  return _internal_has_key_ub();
}
inline void ExperimentParams::clear_key_ub() {
  _impl_.key_ub_ = 1000000;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t ExperimentParams::_internal_key_ub() const {
  return _impl_.key_ub_;
}
inline int32_t ExperimentParams::key_ub() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.key_ub)
  return _internal_key_ub();
}
inline void ExperimentParams::_internal_set_key_ub(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.key_ub_ = value;
}
inline void ExperimentParams::set_key_ub(int32_t value) {
  _internal_set_key_ub(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.key_ub)
}

// required int32 region_size = 12 [default = 22];
inline bool ExperimentParams::_internal_has_region_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExperimentParams::has_region_size() const {
  return _internal_has_region_size();
}
inline void ExperimentParams::clear_region_size() {
  _impl_.region_size_ = 22;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ExperimentParams::_internal_region_size() const {
  return _impl_.region_size_;
}
inline int32_t ExperimentParams::region_size() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.region_size)
  return _internal_region_size();
}
inline void ExperimentParams::_internal_set_region_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.region_size_ = value;
}
inline void ExperimentParams::set_region_size(int32_t value) {
  _internal_set_region_size(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.region_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_experiment_2eproto
